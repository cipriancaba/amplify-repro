type User
  @model(subscriptions: null)
  @auth(
    rules: [
      {
        allow: private
        provider: iam
        operations: [read, create, update, delete]
      }
      {
        allow: owner
        operations: [read, update]
        ownerField: "id"
        identityClaim: "custom:userId"
      }
      {
        allow: groups
        groups: ["admins"]
        operations: [read, create, update, delete]
      }
    ]
  ) {
  id: ID!
  email: String!
}

type Recipe
  @model(subscriptions: null)
  @auth(
    rules: [
      {
        allow: groups
        groups: ["admins"]
        operations: [create, update, delete]
      }
      { allow: private, operations: [read] }
    ]
  ) {
  id: ID!
  title: String
}

type Meal
  @model(subscriptions: null)
  @auth(
    rules: [
      {
        allow: private
        provider: iam
        operations: [create, read, update, delete]
      }
      {
        allow: owner
        operations: [create, read, update, delete]
        ownerField: "userId"
        identityClaim: "custom:userId"
      }
    ]
  )
  @key(name: "byUser", fields: ["userId"]) {
  id: ID!

  recipeId: ID!
  recipe: Recipe @connection(fields: ["recipeId"])

  userId: ID
}
